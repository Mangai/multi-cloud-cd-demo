---
- name: Deploy Demo
  hosts: localhost
  gather_facts: false
  run_once: true
  vars:
    infra_project: demo-infra
    user_gogs_admin: gogs
    user_gogs_user: developer
    user_gogs_password: openshift
    github_account: siamaksade
    github_ref: v3.9
    openshift_cli: oc
    project_admin: developer
    clean_init: false
    digitalocean_api_key: 
  tasks:
    - include_role:
        name: openshift_common_facts
      tags: always

    - name: check to be logged in as cluster admin
      shell: "{{ openshift_cli }} get project default"
      changed_when: false

    # get openshift version
    - name: get openshift version
      shell: "{{ openshift_cli }} version | grep '^openshift.*$' | sed 's/openshift //g'"
      register: openshift_version_result 

    - set_fact:
        openshift_verson_long: "{{ openshift_version_result.stdout }}"
        openshift_verson_short: "{{ openshift_version_result.stdout | regex_replace('^(v\\d+\\.\\d+)\\..*$', '\\1') }}"

    # configure ansible broker
    - name: create digital ocean secret
      shell: |
        {{ openshift_cli }} delete secret digital-ocean-api-key -n openshift-ansible-service-broker
        {{ openshift_cli }} create secret generic digital-ocean-api-key --from-literal=api_key={{ digitalocean_api_key }} -n openshift-ansible-service-broker
      ignore_errors: true
      tags: broker

    - name: create broker configmap
      template:
        src: files/broker-config.yml.j2
        dest: "/tmp/broker-config.yml"
        force: true

    - name: update ansible broker config
      shell: |
        {{ openshift_cli }} delete configmap broker-config -n openshift-ansible-service-broker
        {{ openshift_cli }} create configmap broker-config --from-file=broker-config=/tmp/broker-config.yml -n openshift-ansible-service-broker
      tags: broker

    - name: restart ansible broker
      shell: "{{ openshift_cli }} rollout latest dc/asb -n openshift-ansible-service-broker" 
      tags: broker

    # configure console logo
    - name: check if logo configured
      shell: "{{ openshift_cli }} get bc assets -n openshift-web-console"
      ignore_errors: true
      result: logo_result
      tags: logo

    - name: configure dev logo
      shell: |
        {{ openshift_cli }} new-app nginx:1.12~https://github.com/{{ github_account }}/multi-cloud-cd-demo.git#{{ github_ref }} --name=assets --context-dir=web-console-assets -n openshift-web-console
        {{ openshift_cli }} oc create route edge assets --service=assets openshift-web-console
      ignore_errors: true
      when: logo_result|failed
      tags: logo

    # create lab-infra project
    - name: create lab infra project
      shell: "{{ openshift_cli }} new-project {{ infra_project }}"
      ignore_errors: true
      tags: always

    - name: make lab infra project global
      shell: "{{ openshift_cli }} adm pod-network make-projects-global {{ infra_project }}"
      ignore_errors: true
      tags: always

    # deploy nexus
    - import_role:
        name: openshift_sonatype_nexus
      vars:
        project_name: "{{ infra_project }}"
        nexus_image_version: 3.12.0
        nexus_max_memory: 6Gi
      tags: nexus

    # deploy che
    - import_role:
        name: openshift_eclipse_che
      vars:
        project_name: "{{ infra_project }}"
        che_version: "6.5.1"
        route_suffix: "{{ apps_hostname_suffix }}"
      tags: eclipse-che

    # deploy gogs
    - set_fact:
        gogs_hostname: gogs-{{ infra_project }}.{{ apps_hostname_suffix }}
      tags: always

    - import_role:
        name: openshift_gogs
      vars:
        project_name: "{{ infra_project }}"
        gogs_route: "{{ gogs_hostname }}"
        gogs_image_version: 0.11.34
        gogs_admin_user: "{{ user_gogs_admin }}"
        gogs_admin_password: "{{ user_gogs_password }}"
        gogs_user: "{{ user_gogs_user }}"
        gogs_password: "{{ user_gogs_password }}"
        clean_deploy: true
      tags: gogs

    # create catalog git repo
    - name: create catalog git repository
      uri:
        url: http://{{ gogs_hostname }}/api/v1/user/repos
        method: POST
        body: '{"name": "catalog-spring-boot", "private": false}'
        body_format: json
        user: "{{ user_gogs_user }}"
        password: "{{ user_gogs_password }}"
        status_code: 200,201
        force_basic_auth: true
      tags: gogs

    - name: create temporary git directory
      tempfile:
        state: directory
        prefix: projects-git
      register: git_dir
      tags: gogs

    - name: unarchive projects source archive
      unarchive:
        remote_src: yes
        src: "https://github.com/{{ github_account }}/multi-cloud-cd-demo/archive/{{ github_ref }}.tar.gz"
        dest: "{{ git_dir.path }}"
      tags: gogs

    - name: push catalog to git repository in gogs
      shell: |
        git init
        git remote add origin http://{{ user_gogs_user }}:{{ user_gogs_password }}@{{ gogs_hostname }}/{{ user_gogs_user }}/catalog-spring-boot.git
        git add . --all
        git config user.email "rhdeveloper@redhat.com"
        git config user.name "rh-developer"
        git commit -m "Initial add"
        git push origin master
      args:
        chdir: "{{ git_dir.path }}/github_account-{{ github_ref }}/catalog-spring-boot"
      tags: gogs

    - name: create cd-infra git repository
      uri:
        url: http://{{ gogs_hostname }}/api/v1/user/repos
        method: POST
        body: '{"name": "cd-infra", "private": false}'
        body_format: json
        user: "{{ user_gogs_user }}"
        password: "{{ user_gogs_password }}"
        status_code: 200,201
        force_basic_auth: true
      tags: gogs

    # create projects
    - name: create cicd, dev and stage projects
      shell: |
        {{ openshift_cli }} adm new-project dev   --admin="{{ project_admin }}" --display-name="CoolStore DEV"
        {{ openshift_cli }} adm new-project stage --admin="{{ project_admin }}" --display-name="CoolStore STAGE"
        {{ openshift_cli }} adm new-project cicd  --admin="{{ project_admin }}" --display-name="CI/CD"
        
        {{ openshift_cli }} adm policy add-role-to-group admin                system:serviceaccounts:cicd        -n dev
        {{ openshift_cli }} adm policy add-role-to-group admin                system:serviceaccounts:cicd        -n stage
        {{ openshift_cli }} adm policy add-role-to-group system:image-puller  system:serviceaccounts:dev         -n cicd
        {{ openshift_cli }} adm policy add-role-to-group system:image-puller  system:serviceaccounts:stage       -n cicd
        {{ openshift_cli }} adm policy add-role-to-user  system:image-builder system:serviceaccount:dev:builder  -n cicd
      ignore_errors: true
      tags: user_projects

    # create web imagestream
    - name: import web ui images from docker hub
      shell: |
        {{ openshift_cli }} import-image web-ui --from="docker.io/siamaksade/multicloud-demo-web" --all --confirm -n cicd
        {{ openshift_cli }} tag cicd/web-ui:{{ openshift_verson_short }} cicd/web-ui:1.0
        {{ openshift_cli }} tag cicd/web-ui:{{ openshift_verson_short }} cicd/web-ui:latest

    # configure jenkins slave
    - name: create jenkins slave configmap 
      shell: "{{ openshift_cli }} apply -f files/jenkins-slave-skopeo.yml -n cicd"
      ignore_errors: true
      tags: user_projects

    # populate nexus
    - name: populate nexus
      shell: "{{ openshift_cli }} new-build redhat-openjdk18-openshift:1.2~http://{{ gogs_hostname }}/{{ user_gogs_user }}/catalog-spring-boot.git -n {{ infra_project }} -e MAVEN_MIRROR_URL=http://nexus.{{ infra_project }}.svc:8081/repository/maven-all-public"
      ignore_errors: true
      tags: populate-nexus

    # validate cluster
    - name: check openjdk image stream installed
      shell: "{{ openshift_cli }} get is redhat-openjdk18-openshift -n openshift"
      register: jdk_imagestream_result
      ignore_errors: true
      tags: validate

    - name: display instructions to install openjdk image stream
      debug:
        msg:
          - '### WARNING ###'
          - 'OpenJDK image stream is not installed. Run the following as cluster admin:'
          - '{{ openshift_cli }} create -n openshift -f https://raw.githubusercontent.com/openshift/openshift-ansible/release-3.9/roles/openshift_examples/files/examples/v3.9/xpaas-streams/jboss-image-streams.json'
      when: jdk_imagestream_result|failed   
      tags: validate

